// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.web;

import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.adorsys.adpharma.domain.CommandeFournisseur;
import org.adorsys.adpharma.domain.Etat;
import org.adorsys.adpharma.domain.Fournisseur;
import org.adorsys.adpharma.domain.LigneCmdFournisseur;
import org.adorsys.adpharma.domain.ModeSelection;
import org.adorsys.adpharma.domain.PharmaUser;
import org.adorsys.adpharma.domain.Site;
import org.adorsys.adpharma.domain.TVA;
import org.adorsys.adpharma.platform.rest.exchanges.ExchangeBeanState;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect CommandeFournisseurController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String CommandeFournisseurController.create(@Valid CommandeFournisseur commandeFournisseur, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("commandeFournisseur", commandeFournisseur);
            addDateTimeFormatPatterns(uiModel);
            return "commandefournisseurs/create";
        }
        uiModel.asMap().clear();
        commandeFournisseur.persist();
        return "redirect:/commandefournisseurs/" + encodeUrlPathSegment(commandeFournisseur.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String CommandeFournisseurController.createForm(Model uiModel) {
        uiModel.addAttribute("commandeFournisseur", new CommandeFournisseur());
        addDateTimeFormatPatterns(uiModel);
        List dependencies = new ArrayList();
        if (Fournisseur.countFournisseurs() == 0) {
            dependencies.add(new String[]{"fournisseur", "fournisseurs"});
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "commandefournisseurs/create";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String CommandeFournisseurController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("commandefournisseurs", CommandeFournisseur.findCommandeFournisseurEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) CommandeFournisseur.countCommandeFournisseurs() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("commandefournisseurs", CommandeFournisseur.findAllCommandeFournisseurs());
        }
        addDateTimeFormatPatterns(uiModel);
        return "commandefournisseurs/list";
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String CommandeFournisseurController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("commandeFournisseur", CommandeFournisseur.findCommandeFournisseur(id));
        addDateTimeFormatPatterns(uiModel);
        return "commandefournisseurs/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String CommandeFournisseurController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        CommandeFournisseur.findCommandeFournisseur(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/commandefournisseurs";
    }
    
    @ModelAttribute("modeselections")
    public Collection<ModeSelection> CommandeFournisseurController.populateModeSelections() {
        return Arrays.asList(ModeSelection.class.getEnumConstants());
    }
    
    @ModelAttribute("pharmausers")
    public Collection<PharmaUser> CommandeFournisseurController.populatePharmaUsers() {
        return PharmaUser.findAllPharmaUsers();
    }
    
    @ModelAttribute("sites")
    public Collection<Site> CommandeFournisseurController.populateSites() {
        return Site.findAllSites();
    }
    
    @ModelAttribute("tvas")
    public Collection<TVA> CommandeFournisseurController.populateTVAS() {
        return TVA.findAllTVAS();
    }
    
    @ModelAttribute("exchangebeanstates")
    public Collection<ExchangeBeanState> CommandeFournisseurController.populateExchangeBeanStates() {
        return Arrays.asList(ExchangeBeanState.class.getEnumConstants());
    }
    
    void CommandeFournisseurController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("commandeFournisseur_submitiondate_date_format", "dd-MM-yyyy hh:mm:ss");
        uiModel.addAttribute("commandeFournisseur_traitmentdate_date_format", "dd-MM-yyyy hh:mm:ss");
        uiModel.addAttribute("commandeFournisseur_datecreation_date_format", "dd-MM-yyyy hh:mm");
        uiModel.addAttribute("commandeFournisseur_datelimitelivraison_date_format", "dd-MM-yyyy hh:mm");
    }
    
    String CommandeFournisseurController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
