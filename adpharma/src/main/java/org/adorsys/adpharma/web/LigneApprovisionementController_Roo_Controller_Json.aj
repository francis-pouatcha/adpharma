// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.web;

import java.lang.Long;
import java.lang.String;
import java.math.BigInteger;
import org.adorsys.adpharma.domain.Approvisionement;
import org.adorsys.adpharma.domain.LigneApprovisionement;
import org.adorsys.adpharma.domain.Produit;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect LigneApprovisionementController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneApprovisionementController.showJson(@PathVariable("id") Long id) {
        LigneApprovisionement ligneapprovisionement = LigneApprovisionement.findLigneApprovisionement(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        if (ligneapprovisionement == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ligneapprovisionement.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneApprovisionementController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneApprovisionement.toJsonArray(LigneApprovisionement.findAllLigneApprovisionements()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> LigneApprovisionementController.createFromJson(@RequestBody String json) {
        LigneApprovisionement.fromJsonToLigneApprovisionement(json).persist();
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> LigneApprovisionementController.createFromJsonArray(@RequestBody String json) {
        for (LigneApprovisionement ligneApprovisionement: LigneApprovisionement.fromJsonArrayToLigneApprovisionements(json)) {
            ligneApprovisionement.persist();
        }
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> LigneApprovisionementController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (LigneApprovisionement.fromJsonToLigneApprovisionement(json).merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> LigneApprovisionementController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        for (LigneApprovisionement ligneApprovisionement: LigneApprovisionement.fromJsonArrayToLigneApprovisionements(json)) {
            if (ligneApprovisionement.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> LigneApprovisionementController.deleteFromJson(@PathVariable("id") Long id) {
        LigneApprovisionement ligneapprovisionement = LigneApprovisionement.findLigneApprovisionement(id);
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (ligneapprovisionement == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ligneapprovisionement.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByApprovisionement", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneApprovisionementController.jsonFindLigneApprovisionementsByApprovisionement(@RequestParam("approvisionement") Approvisionement approvisionement) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneApprovisionement.toJsonArray(LigneApprovisionement.findLigneApprovisionementsByApprovisionement(approvisionement).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCipMaisonEquals", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneApprovisionementController.jsonFindLigneApprovisionementsByCipMaisonEquals(@RequestParam("cipMaison") String cipMaison) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneApprovisionement.toJsonArray(LigneApprovisionement.findLigneApprovisionementsByCipMaisonEquals(cipMaison).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDesignationLike", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneApprovisionementController.jsonFindLigneApprovisionementsByDesignationLike(@RequestParam("designation") String designation) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneApprovisionement.toJsonArray(LigneApprovisionement.findLigneApprovisionementsByDesignationLike(designation).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByProduit", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneApprovisionementController.jsonFindLigneApprovisionementsByProduit(@RequestParam("produit") Produit produit) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneApprovisionement.toJsonArray(LigneApprovisionement.findLigneApprovisionementsByProduit(produit).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByQuantieEnStockAndCipEquals", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneApprovisionementController.jsonFindLigneApprovisionementsByQuantieEnStockAndCipEquals(@RequestParam("quantieEnStock") BigInteger quantieEnStock, @RequestParam("cip") String cip) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneApprovisionement.toJsonArray(LigneApprovisionement.findLigneApprovisionementsByQuantieEnStockAndCipEquals(quantieEnStock, cip).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByQuantieEnStockAndDesignationLike", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneApprovisionementController.jsonFindLigneApprovisionementsByQuantieEnStockAndDesignationLike(@RequestParam("quantieEnStock") BigInteger quantieEnStock, @RequestParam("designation") String designation) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneApprovisionement.toJsonArray(LigneApprovisionement.findLigneApprovisionementsByQuantieEnStockAndDesignationLike(quantieEnStock, designation).getResultList()), headers, HttpStatus.OK);
    }
    
}
