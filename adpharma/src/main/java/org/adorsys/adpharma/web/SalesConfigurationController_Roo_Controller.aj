// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.web;

import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.adorsys.adpharma.domain.SalesConfiguration;
import org.adorsys.adpharma.domain.TypeVente;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect SalesConfigurationController_Roo_Controller {
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String SalesConfigurationController.createForm(Model uiModel) {
        uiModel.addAttribute("salesConfiguration", new SalesConfiguration());
        return "salesconfigurations/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String SalesConfigurationController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("salesconfiguration", SalesConfiguration.findSalesConfiguration(id));
        uiModel.addAttribute("itemId", id);
        return "salesconfigurations/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String SalesConfigurationController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("salesconfigurations", SalesConfiguration.findSalesConfigurationEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) SalesConfiguration.countSalesConfigurations() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("salesconfigurations", SalesConfiguration.findAllSalesConfigurations());
        }
        return "salesconfigurations/list";
    }
    
    
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String SalesConfigurationController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("salesConfiguration", SalesConfiguration.findSalesConfiguration(id));
        return "salesconfigurations/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String SalesConfigurationController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        SalesConfiguration.findSalesConfiguration(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/salesconfigurations";
    }
    
    @ModelAttribute("salesconfigurations")
    public Collection<SalesConfiguration> SalesConfigurationController.populateSalesConfigurations() {
        return SalesConfiguration.findAllSalesConfigurations();
    }
    
    @ModelAttribute("typeventes")
    public Collection<TypeVente> SalesConfigurationController.populateTypeVentes() {
        return Arrays.asList(TypeVente.class.getEnumConstants());
    }
    
}
