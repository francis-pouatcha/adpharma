// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.web;

import java.lang.Boolean;
import java.lang.Long;
import java.lang.String;
import java.util.Date;
import org.adorsys.adpharma.domain.Caisse;
import org.adorsys.adpharma.domain.Client;
import org.adorsys.adpharma.domain.CommandeClient;
import org.adorsys.adpharma.domain.Facture;
import org.adorsys.adpharma.domain.PharmaUser;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect FactureController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FactureController.showJson(@PathVariable("id") Long id) {
        Facture facture = Facture.findFacture(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        if (facture == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(facture.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FactureController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Facture.toJsonArray(Facture.findAllFactures()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> FactureController.createFromJson(@RequestBody String json) {
        Facture.fromJsonToFacture(json).persist();
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> FactureController.createFromJsonArray(@RequestBody String json) {
        for (Facture facture: Facture.fromJsonArrayToFactures(json)) {
            facture.persist();
        }
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> FactureController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (Facture.fromJsonToFacture(json).merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> FactureController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        for (Facture facture: Facture.fromJsonArrayToFactures(json)) {
            if (facture.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> FactureController.deleteFromJson(@PathVariable("id") Long id) {
        Facture facture = Facture.findFacture(id);
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (facture == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        facture.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCaisseAndEncaisserNot", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FactureController.jsonFindFacturesByCaisseAndEncaisserNot(@RequestParam("caisse") Caisse caisse, @RequestParam(value = "encaisser", required = false) Boolean encaisser) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Facture.toJsonArray(Facture.findFacturesByCaisseAndEncaisserNot(caisse, encaisser == null ? new Boolean(false) : encaisser).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByClientAndDateCreationBetween", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FactureController.jsonFindFacturesByClientAndDateCreationBetween(@RequestParam("client") Client client, @RequestParam("minDateCreation") @DateTimeFormat(pattern = "dd-MM-yyyy HH:mm") Date minDateCreation, @RequestParam("maxDateCreation") @DateTimeFormat(pattern = "dd-MM-yyyy HH:mm") Date maxDateCreation) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Facture.toJsonArray(Facture.findFacturesByClientAndDateCreationBetween(client, minDateCreation, maxDateCreation).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCommande", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FactureController.jsonFindFacturesByCommande(@RequestParam("commande") CommandeClient commande) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Facture.toJsonArray(Facture.findFacturesByCommande(commande).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDateCreationBetween", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FactureController.jsonFindFacturesByDateCreationBetween(@RequestParam("minDateCreation") @DateTimeFormat(pattern = "dd-MM-yyyy HH:mm") Date minDateCreation, @RequestParam("maxDateCreation") @DateTimeFormat(pattern = "dd-MM-yyyy HH:mm") Date maxDateCreation) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Facture.toJsonArray(Facture.findFacturesByDateCreationBetween(minDateCreation, maxDateCreation).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByFactureNumberEquals", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FactureController.jsonFindFacturesByFactureNumberEquals(@RequestParam("factureNumber") String factureNumber) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Facture.toJsonArray(Facture.findFacturesByFactureNumberEquals(factureNumber).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySolderNot", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FactureController.jsonFindFacturesBySolderNot(@RequestParam(value = "solder", required = false) Boolean solder) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Facture.toJsonArray(Facture.findFacturesBySolderNot(solder == null ? new Boolean(false) : solder).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByVendeurAndDateCreationBetween", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FactureController.jsonFindFacturesByVendeurAndDateCreationBetween(@RequestParam("vendeur") PharmaUser vendeur, @RequestParam("minDateCreation") @DateTimeFormat(pattern = "dd-MM-yyyy HH:mm") Date minDateCreation, @RequestParam("maxDateCreation") @DateTimeFormat(pattern = "dd-MM-yyyy HH:mm") Date maxDateCreation) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Facture.toJsonArray(Facture.findFacturesByVendeurAndDateCreationBetween(vendeur, minDateCreation, maxDateCreation).getResultList()), headers, HttpStatus.OK);
    }
    
}
