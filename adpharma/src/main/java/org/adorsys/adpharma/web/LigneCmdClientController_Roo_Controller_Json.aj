// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.web;

import java.lang.Long;
import java.lang.String;
import org.adorsys.adpharma.domain.CommandeClient;
import org.adorsys.adpharma.domain.LigneCmdClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect LigneCmdClientController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneCmdClientController.showJson(@PathVariable("id") Long id) {
        LigneCmdClient lignecmdclient = LigneCmdClient.findLigneCmdClient(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        if (lignecmdclient == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(lignecmdclient.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneCmdClientController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneCmdClient.toJsonArray(LigneCmdClient.findAllLigneCmdClients()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> LigneCmdClientController.createFromJson(@RequestBody String json) {
        LigneCmdClient.fromJsonToLigneCmdClient(json).persist();
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> LigneCmdClientController.createFromJsonArray(@RequestBody String json) {
        for (LigneCmdClient ligneCmdClient: LigneCmdClient.fromJsonArrayToLigneCmdClients(json)) {
            ligneCmdClient.persist();
        }
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> LigneCmdClientController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (LigneCmdClient.fromJsonToLigneCmdClient(json).merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> LigneCmdClientController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        for (LigneCmdClient ligneCmdClient: LigneCmdClient.fromJsonArrayToLigneCmdClients(json)) {
            if (ligneCmdClient.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> LigneCmdClientController.deleteFromJson(@PathVariable("id") Long id) {
        LigneCmdClient lignecmdclient = LigneCmdClient.findLigneCmdClient(id);
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (lignecmdclient == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        lignecmdclient.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCipEquals", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneCmdClientController.jsonFindLigneCmdClientsByCipEquals(@RequestParam("cip") String cip) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneCmdClient.toJsonArray(LigneCmdClient.findLigneCmdClientsByCipEquals(cip).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCipMEqualsAndCommande", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneCmdClientController.jsonFindLigneCmdClientsByCipMEqualsAndCommande(@RequestParam("cipM") String cipM, @RequestParam("commande") CommandeClient commande) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneCmdClient.toJsonArray(LigneCmdClient.findLigneCmdClientsByCipMEqualsAndCommande(cipM, commande).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCommande", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LigneCmdClientController.jsonFindLigneCmdClientsByCommande(@RequestParam("commande") CommandeClient commande) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(LigneCmdClient.toJsonArray(LigneCmdClient.findLigneCmdClientsByCommande(commande).getResultList()), headers, HttpStatus.OK);
    }
    
}
