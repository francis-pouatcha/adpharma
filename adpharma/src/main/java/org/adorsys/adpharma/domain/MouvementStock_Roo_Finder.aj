// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.domain;

import java.lang.String;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.adorsys.adpharma.domain.MouvementStock;
import org.adorsys.adpharma.domain.TypeMouvement;

privileged aspect MouvementStock_Roo_Finder {
    
    public static TypedQuery<MouvementStock> MouvementStock.findMouvementStocksByCipMEquals(String cipM) {
        if (cipM == null || cipM.length() == 0) throw new IllegalArgumentException("The cipM argument is required");
        EntityManager em = MouvementStock.entityManager();
        TypedQuery<MouvementStock> q = em.createQuery("SELECT o FROM MouvementStock AS o WHERE o.cipM = :cipM", MouvementStock.class);
        q.setParameter("cipM", cipM);
        return q;
    }
    
    public static TypedQuery<MouvementStock> MouvementStock.findMouvementStocksByDateCreationBetween(Date minDateCreation, Date maxDateCreation) {
        if (minDateCreation == null) throw new IllegalArgumentException("The minDateCreation argument is required");
        if (maxDateCreation == null) throw new IllegalArgumentException("The maxDateCreation argument is required");
        EntityManager em = MouvementStock.entityManager();
        TypedQuery<MouvementStock> q = em.createQuery("SELECT o FROM MouvementStock AS o WHERE o.dateCreation BETWEEN :minDateCreation AND :maxDateCreation", MouvementStock.class);
        q.setParameter("minDateCreation", minDateCreation);
        q.setParameter("maxDateCreation", maxDateCreation);
        return q;
    }
    
    public static TypedQuery<MouvementStock> MouvementStock.findMouvementStocksByDateCreationBetweenAndAgentCreateurEquals(Date minDateCreation, Date maxDateCreation, String agentCreateur) {
        if (minDateCreation == null) throw new IllegalArgumentException("The minDateCreation argument is required");
        if (maxDateCreation == null) throw new IllegalArgumentException("The maxDateCreation argument is required");
        if (agentCreateur == null || agentCreateur.length() == 0) throw new IllegalArgumentException("The agentCreateur argument is required");
        EntityManager em = MouvementStock.entityManager();
        TypedQuery<MouvementStock> q = em.createQuery("SELECT o FROM MouvementStock AS o WHERE o.dateCreation BETWEEN :minDateCreation AND :maxDateCreation  AND o.agentCreateur = :agentCreateur", MouvementStock.class);
        q.setParameter("minDateCreation", minDateCreation);
        q.setParameter("maxDateCreation", maxDateCreation);
        q.setParameter("agentCreateur", agentCreateur);
        return q;
    }
    
    public static TypedQuery<MouvementStock> MouvementStock.findMouvementStocksByDateCreationBetweenAndAgentCreateurLike(Date minDateCreation, Date maxDateCreation, String agentCreateur) {
        if (minDateCreation == null) throw new IllegalArgumentException("The minDateCreation argument is required");
        if (maxDateCreation == null) throw new IllegalArgumentException("The maxDateCreation argument is required");
        if (agentCreateur == null || agentCreateur.length() == 0) throw new IllegalArgumentException("The agentCreateur argument is required");
        agentCreateur = agentCreateur.replace('*', '%');
        if (agentCreateur.charAt(0) != '%') {
            agentCreateur = "%" + agentCreateur;
        }
        if (agentCreateur.charAt(agentCreateur.length() - 1) != '%') {
            agentCreateur = agentCreateur + "%";
        }
        EntityManager em = MouvementStock.entityManager();
        TypedQuery<MouvementStock> q = em.createQuery("SELECT o FROM MouvementStock AS o WHERE o.dateCreation BETWEEN :minDateCreation AND :maxDateCreation  AND LOWER(o.agentCreateur) LIKE LOWER(:agentCreateur)", MouvementStock.class);
        q.setParameter("minDateCreation", minDateCreation);
        q.setParameter("maxDateCreation", maxDateCreation);
        q.setParameter("agentCreateur", agentCreateur);
        return q;
    }
    
    public static TypedQuery<MouvementStock> MouvementStock.findMouvementStocksByDesignationEqualsAndDateCreationBetween(String designation, Date minDateCreation, Date maxDateCreation) {
        if (designation == null || designation.length() == 0) throw new IllegalArgumentException("The designation argument is required");
        if (minDateCreation == null) throw new IllegalArgumentException("The minDateCreation argument is required");
        if (maxDateCreation == null) throw new IllegalArgumentException("The maxDateCreation argument is required");
        EntityManager em = MouvementStock.entityManager();
        TypedQuery<MouvementStock> q = em.createQuery("SELECT o FROM MouvementStock AS o WHERE o.designation = :designation  AND o.dateCreation BETWEEN :minDateCreation AND :maxDateCreation", MouvementStock.class);
        q.setParameter("designation", designation);
        q.setParameter("minDateCreation", minDateCreation);
        q.setParameter("maxDateCreation", maxDateCreation);
        return q;
    }
    
    public static TypedQuery<MouvementStock> MouvementStock.findMouvementStocksByDesignationLike(String designation) {
        if (designation == null || designation.length() == 0) throw new IllegalArgumentException("The designation argument is required");
        designation = designation.replace('*', '%');
        if (designation.charAt(0) != '%') {
            designation = "%" + designation;
        }
        if (designation.charAt(designation.length() - 1) != '%') {
            designation = designation + "%";
        }
        EntityManager em = MouvementStock.entityManager();
        TypedQuery<MouvementStock> q = em.createQuery("SELECT o FROM MouvementStock AS o WHERE LOWER(o.designation) LIKE LOWER(:designation)", MouvementStock.class);
        q.setParameter("designation", designation);
        return q;
    }
    
    public static TypedQuery<MouvementStock> MouvementStock.findMouvementStocksByTypeMouvementAndDateCreationBetween(TypeMouvement typeMouvement, Date minDateCreation, Date maxDateCreation) {
        if (typeMouvement == null) throw new IllegalArgumentException("The typeMouvement argument is required");
        if (minDateCreation == null) throw new IllegalArgumentException("The minDateCreation argument is required");
        if (maxDateCreation == null) throw new IllegalArgumentException("The maxDateCreation argument is required");
        EntityManager em = MouvementStock.entityManager();
        TypedQuery<MouvementStock> q = em.createQuery("SELECT o FROM MouvementStock AS o WHERE o.typeMouvement = :typeMouvement AND o.dateCreation BETWEEN :minDateCreation AND :maxDateCreation", MouvementStock.class);
        q.setParameter("typeMouvement", typeMouvement);
        q.setParameter("minDateCreation", minDateCreation);
        q.setParameter("maxDateCreation", maxDateCreation);
        return q;
    }
    
}
