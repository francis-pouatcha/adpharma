// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.domain;

import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.adorsys.adpharma.domain.Rayon;

privileged aspect Rayon_Roo_Finder {
    
    public static TypedQuery<Rayon> Rayon.findRayonsByDisplayNameEquals(String displayName) {
        if (displayName == null || displayName.length() == 0) throw new IllegalArgumentException("The displayName argument is required");
        EntityManager em = Rayon.entityManager();
        TypedQuery<Rayon> q = em.createQuery("SELECT o FROM Rayon AS o WHERE o.displayName = :displayName", Rayon.class);
        q.setParameter("displayName", displayName);
        return q;
    }
    
    public static TypedQuery<Rayon> Rayon.findRayonsByDisplayNameLike(String displayName) {
        if (displayName == null || displayName.length() == 0) throw new IllegalArgumentException("The displayName argument is required");
        displayName = displayName.replace('*', '%');
        if (displayName.charAt(0) != '%') {
            displayName = "%" + displayName;
        }
        if (displayName.charAt(displayName.length() - 1) != '%') {
            displayName = displayName + "%";
        }
        EntityManager em = Rayon.entityManager();
        TypedQuery<Rayon> q = em.createQuery("SELECT o FROM Rayon AS o WHERE LOWER(o.displayName) LIKE LOWER(:displayName)", Rayon.class);
        q.setParameter("displayName", displayName);
        return q;
    }
    
    public static TypedQuery<Rayon> Rayon.findRayonsByNameEquals(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Rayon.entityManager();
        TypedQuery<Rayon> q = em.createQuery("SELECT o FROM Rayon AS o WHERE o.name = :name", Rayon.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Rayon> Rayon.findRayonsByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Rayon.entityManager();
        TypedQuery<Rayon> q = em.createQuery("SELECT o FROM Rayon AS o WHERE LOWER(o.name) LIKE LOWER(:name)", Rayon.class);
        q.setParameter("name", name);
        return q;
    }
    
}
