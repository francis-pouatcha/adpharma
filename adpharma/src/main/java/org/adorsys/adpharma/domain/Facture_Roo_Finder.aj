// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.domain;

import java.lang.Boolean;
import java.lang.String;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.adorsys.adpharma.domain.Client;
import org.adorsys.adpharma.domain.CommandeClient;
import org.adorsys.adpharma.domain.Facture;
import org.adorsys.adpharma.domain.PharmaUser;

privileged aspect Facture_Roo_Finder {
    
    public static TypedQuery<Facture> Facture.findFacturesByClientAndDateCreationBetween(Client client, Date minDateCreation, Date maxDateCreation) {
        if (client == null) throw new IllegalArgumentException("The client argument is required");
        if (minDateCreation == null) throw new IllegalArgumentException("The minDateCreation argument is required");
        if (maxDateCreation == null) throw new IllegalArgumentException("The maxDateCreation argument is required");
        EntityManager em = Facture.entityManager();
        TypedQuery<Facture> q = em.createQuery("SELECT o FROM Facture AS o WHERE o.client = :client AND o.dateCreation BETWEEN :minDateCreation AND :maxDateCreation", Facture.class);
        q.setParameter("client", client);
        q.setParameter("minDateCreation", minDateCreation);
        q.setParameter("maxDateCreation", maxDateCreation);
        return q;
    }
    
    public static TypedQuery<Facture> Facture.findFacturesByCommande(CommandeClient commande) {
        if (commande == null) throw new IllegalArgumentException("The commande argument is required");
        EntityManager em = Facture.entityManager();
        TypedQuery<Facture> q = em.createQuery("SELECT o FROM Facture AS o WHERE o.commande = :commande", Facture.class);
        q.setParameter("commande", commande);
        return q;
    }
    
    public static TypedQuery<Facture> Facture.findFacturesByDateCreationBetween(Date minDateCreation, Date maxDateCreation) {
        if (minDateCreation == null) throw new IllegalArgumentException("The minDateCreation argument is required");
        if (maxDateCreation == null) throw new IllegalArgumentException("The maxDateCreation argument is required");
        EntityManager em = Facture.entityManager();
        TypedQuery<Facture> q = em.createQuery("SELECT o FROM Facture AS o WHERE o.dateCreation BETWEEN :minDateCreation AND :maxDateCreation", Facture.class);
        q.setParameter("minDateCreation", minDateCreation);
        q.setParameter("maxDateCreation", maxDateCreation);
        return q;
    }
    
    public static TypedQuery<Facture> Facture.findFacturesByFactureNumberEquals(String factureNumber) {
        if (factureNumber == null || factureNumber.length() == 0) throw new IllegalArgumentException("The factureNumber argument is required");
        EntityManager em = Facture.entityManager();
        TypedQuery<Facture> q = em.createQuery("SELECT o FROM Facture AS o WHERE o.factureNumber = :factureNumber", Facture.class);
        q.setParameter("factureNumber", factureNumber);
        return q;
    }
    
    public static TypedQuery<Facture> Facture.findFacturesBySolderNot(Boolean solder) {
        if (solder == null) throw new IllegalArgumentException("The solder argument is required");
        EntityManager em = Facture.entityManager();
        TypedQuery<Facture> q = em.createQuery("SELECT o FROM Facture AS o WHERE o.solder IS NOT :solder", Facture.class);
        q.setParameter("solder", solder);
        return q;
    }
    
    public static TypedQuery<Facture> Facture.findFacturesByVendeurAndDateCreationBetween(PharmaUser vendeur, Date minDateCreation, Date maxDateCreation) {
        if (vendeur == null) throw new IllegalArgumentException("The vendeur argument is required");
        if (minDateCreation == null) throw new IllegalArgumentException("The minDateCreation argument is required");
        if (maxDateCreation == null) throw new IllegalArgumentException("The maxDateCreation argument is required");
        EntityManager em = Facture.entityManager();
        TypedQuery<Facture> q = em.createQuery("SELECT o FROM Facture AS o WHERE o.vendeur = :vendeur AND o.dateCreation BETWEEN :minDateCreation AND :maxDateCreation", Facture.class);
        q.setParameter("vendeur", vendeur);
        q.setParameter("minDateCreation", minDateCreation);
        q.setParameter("maxDateCreation", maxDateCreation);
        return q;
    }
    
}
