// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.domain;

import java.lang.Boolean;
import java.lang.String;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.adorsys.adpharma.domain.CommandeFournisseur;
import org.adorsys.adpharma.domain.Etat;
import org.adorsys.adpharma.domain.Fournisseur;

privileged aspect CommandeFournisseur_Roo_Finder {
    
    public static TypedQuery<CommandeFournisseur> CommandeFournisseur.findCommandeFournisseursByCmdNumberEquals(String cmdNumber) {
        if (cmdNumber == null || cmdNumber.length() == 0) throw new IllegalArgumentException("The cmdNumber argument is required");
        EntityManager em = CommandeFournisseur.entityManager();
        TypedQuery<CommandeFournisseur> q = em.createQuery("SELECT o FROM CommandeFournisseur AS o WHERE o.cmdNumber = :cmdNumber", CommandeFournisseur.class);
        q.setParameter("cmdNumber", cmdNumber);
        return q;
    }
    
    public static TypedQuery<CommandeFournisseur> CommandeFournisseur.findCommandeFournisseursByDateCreationBetweenAndEtatCmd(Date minDateCreation, Date maxDateCreation, Etat etatCmd) {
        if (minDateCreation == null) throw new IllegalArgumentException("The minDateCreation argument is required");
        if (maxDateCreation == null) throw new IllegalArgumentException("The maxDateCreation argument is required");
        if (etatCmd == null) throw new IllegalArgumentException("The etatCmd argument is required");
        EntityManager em = CommandeFournisseur.entityManager();
        TypedQuery<CommandeFournisseur> q = em.createQuery("SELECT o FROM CommandeFournisseur AS o WHERE o.dateCreation BETWEEN :minDateCreation AND :maxDateCreation  AND o.etatCmd = :etatCmd", CommandeFournisseur.class);
        q.setParameter("minDateCreation", minDateCreation);
        q.setParameter("maxDateCreation", maxDateCreation);
        q.setParameter("etatCmd", etatCmd);
        return q;
    }
    
    public static TypedQuery<CommandeFournisseur> CommandeFournisseur.findCommandeFournisseursByDateLimiteLivraisonBetween(Date minDateLimiteLivraison, Date maxDateLimiteLivraison) {
        if (minDateLimiteLivraison == null) throw new IllegalArgumentException("The minDateLimiteLivraison argument is required");
        if (maxDateLimiteLivraison == null) throw new IllegalArgumentException("The maxDateLimiteLivraison argument is required");
        EntityManager em = CommandeFournisseur.entityManager();
        TypedQuery<CommandeFournisseur> q = em.createQuery("SELECT o FROM CommandeFournisseur AS o WHERE o.dateLimiteLivraison BETWEEN :minDateLimiteLivraison AND :maxDateLimiteLivraison", CommandeFournisseur.class);
        q.setParameter("minDateLimiteLivraison", minDateLimiteLivraison);
        q.setParameter("maxDateLimiteLivraison", maxDateLimiteLivraison);
        return q;
    }
    
    public static TypedQuery<CommandeFournisseur> CommandeFournisseur.findCommandeFournisseursByFournisseurAndDateCreationBetween(Fournisseur fournisseur, Date minDateCreation, Date maxDateCreation) {
        if (fournisseur == null) throw new IllegalArgumentException("The fournisseur argument is required");
        if (minDateCreation == null) throw new IllegalArgumentException("The minDateCreation argument is required");
        if (maxDateCreation == null) throw new IllegalArgumentException("The maxDateCreation argument is required");
        EntityManager em = CommandeFournisseur.entityManager();
        TypedQuery<CommandeFournisseur> q = em.createQuery("SELECT o FROM CommandeFournisseur AS o WHERE o.fournisseur = :fournisseur AND o.dateCreation BETWEEN :minDateCreation AND :maxDateCreation", CommandeFournisseur.class);
        q.setParameter("fournisseur", fournisseur);
        q.setParameter("minDateCreation", minDateCreation);
        q.setParameter("maxDateCreation", maxDateCreation);
        return q;
    }
    
    public static TypedQuery<CommandeFournisseur> CommandeFournisseur.findCommandeFournisseursByLivreNot(Boolean livre) {
        if (livre == null) throw new IllegalArgumentException("The livre argument is required");
        EntityManager em = CommandeFournisseur.entityManager();
        TypedQuery<CommandeFournisseur> q = em.createQuery("SELECT o FROM CommandeFournisseur AS o WHERE o.livre IS NOT :livre", CommandeFournisseur.class);
        q.setParameter("livre", livre);
        return q;
    }
    
}
