// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.domain;

import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.MappedSuperclass;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.adorsys.adpharma.domain.AdPharmaBaseEntity;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AdPharmaBaseEntity_Roo_Entity {
    
    declare @type: AdPharmaBaseEntity: @MappedSuperclass;
    
    @PersistenceContext
    transient EntityManager AdPharmaBaseEntity.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer AdPharmaBaseEntity.version;
    
    public Integer AdPharmaBaseEntity.getVersion() {
        return this.version;
    }
    
    public void AdPharmaBaseEntity.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void AdPharmaBaseEntity.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AdPharmaBaseEntity.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AdPharmaBaseEntity attached = AdPharmaBaseEntity.findAdPharmaBaseEntity(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AdPharmaBaseEntity.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AdPharmaBaseEntity.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    public static final EntityManager AdPharmaBaseEntity.entityManager() {
        EntityManager em = new AdPharmaBaseEntity() {
        }.entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AdPharmaBaseEntity.countAdPharmaBaseEntitys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AdPharmaBaseEntity o", Long.class).getSingleResult();
    }
    
    public static List<AdPharmaBaseEntity> AdPharmaBaseEntity.findAllAdPharmaBaseEntitys() {
        return entityManager().createQuery("SELECT o FROM AdPharmaBaseEntity o", AdPharmaBaseEntity.class).getResultList();
    }
    
    public static AdPharmaBaseEntity AdPharmaBaseEntity.findAdPharmaBaseEntity(Long id) {
        if (id == null) return null;
        return entityManager().find(AdPharmaBaseEntity.class, id);
    }
    
    public static List<AdPharmaBaseEntity> AdPharmaBaseEntity.findAdPharmaBaseEntityEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AdPharmaBaseEntity o", AdPharmaBaseEntity.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
