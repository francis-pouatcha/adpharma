// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.domain;

import java.lang.Boolean;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.adorsys.adpharma.domain.Caisse;
import org.adorsys.adpharma.domain.PharmaUser;

privileged aspect Caisse_Roo_Finder {
    
    public static TypedQuery<Caisse> Caisse.findCaissesByCaisseOuverteNot(Boolean caisseOuverte) {
        if (caisseOuverte == null) throw new IllegalArgumentException("The caisseOuverte argument is required");
        EntityManager em = Caisse.entityManager();
        TypedQuery<Caisse> q = em.createQuery("SELECT o FROM Caisse AS o WHERE o.caisseOuverte IS NOT :caisseOuverte", Caisse.class);
        q.setParameter("caisseOuverte", caisseOuverte);
        return q;
    }
    
    public static TypedQuery<Caisse> Caisse.findCaissesByCaisseOuverteNotAndCaissier(Boolean caisseOuverte, PharmaUser caissier) {
        if (caisseOuverte == null) throw new IllegalArgumentException("The caisseOuverte argument is required");
        if (caissier == null) throw new IllegalArgumentException("The caissier argument is required");
        EntityManager em = Caisse.entityManager();
        TypedQuery<Caisse> q = em.createQuery("SELECT o FROM Caisse AS o WHERE o.caisseOuverte IS NOT :caisseOuverte  AND o.caissier = :caissier", Caisse.class);
        q.setParameter("caisseOuverte", caisseOuverte);
        q.setParameter("caissier", caissier);
        return q;
    }
    
    public static TypedQuery<Caisse> Caisse.findCaissesByDateOuvertureBetween(Date minDateOuverture, Date maxDateOuverture) {
        if (minDateOuverture == null) throw new IllegalArgumentException("The minDateOuverture argument is required");
        if (maxDateOuverture == null) throw new IllegalArgumentException("The maxDateOuverture argument is required");
        EntityManager em = Caisse.entityManager();
        TypedQuery<Caisse> q = em.createQuery("SELECT o FROM Caisse AS o WHERE o.dateOuverture BETWEEN :minDateOuverture AND :maxDateOuverture", Caisse.class);
        q.setParameter("minDateOuverture", minDateOuverture);
        q.setParameter("maxDateOuverture", maxDateOuverture);
        return q;
    }
    
}
