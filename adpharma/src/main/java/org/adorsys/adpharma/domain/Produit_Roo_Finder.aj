// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.adpharma.domain;

import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.adorsys.adpharma.domain.FamilleProduit;
import org.adorsys.adpharma.domain.Produit;

privileged aspect Produit_Roo_Finder {
    
    public static TypedQuery<Produit> Produit.findProduitsByCipEquals(String cip) {
        if (cip == null || cip.length() == 0) throw new IllegalArgumentException("The cip argument is required");
        EntityManager em = Produit.entityManager();
        TypedQuery<Produit> q = em.createQuery("SELECT o FROM Produit AS o WHERE o.cip = :cip", Produit.class);
        q.setParameter("cip", cip);
        return q;
    }
    
    public static TypedQuery<Produit> Produit.findProduitsByDesignationEquals(String designation) {
        if (designation == null || designation.length() == 0) throw new IllegalArgumentException("The designation argument is required");
        EntityManager em = Produit.entityManager();
        TypedQuery<Produit> q = em.createQuery("SELECT o FROM Produit AS o WHERE o.designation = :designation", Produit.class);
        q.setParameter("designation", designation);
        return q;
    }
    
    public static TypedQuery<Produit> Produit.findProduitsByFamilleProduit(FamilleProduit familleProduit) {
        if (familleProduit == null) throw new IllegalArgumentException("The familleProduit argument is required");
        EntityManager em = Produit.entityManager();
        TypedQuery<Produit> q = em.createQuery("SELECT o FROM Produit AS o WHERE o.familleProduit = :familleProduit", Produit.class);
        q.setParameter("familleProduit", familleProduit);
        return q;
    }
    
    public static TypedQuery<Produit> Produit.findProduitsByProduitNumberLike(String produitNumber) {
        if (produitNumber == null || produitNumber.length() == 0) throw new IllegalArgumentException("The produitNumber argument is required");
        produitNumber = produitNumber.replace('*', '%');
        if (produitNumber.charAt(0) != '%') {
            produitNumber = "%" + produitNumber;
        }
        if (produitNumber.charAt(produitNumber.length() - 1) != '%') {
            produitNumber = produitNumber + "%";
        }
        EntityManager em = Produit.entityManager();
        TypedQuery<Produit> q = em.createQuery("SELECT o FROM Produit AS o WHERE LOWER(o.produitNumber) LIKE LOWER(:produitNumber)", Produit.class);
        q.setParameter("produitNumber", produitNumber);
        return q;
    }
    
}
